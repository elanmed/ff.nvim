*ff.txt*                                        Last change: 2025 September 02

==============================================================================
Table of Contents                                       *ff-table-of-contents*

Configuration example ............................. |ff-configuration-example|
API ................................................................. |ff-api|
`setup` ........................................................... |ff-setup|
`find` ............................................................. |ff-find|
`refresh_fd_cache` ..................................... |ff-refresh_fd_cache|
Performance ................................................. |ff-performance|
Highlight Groups ....................................... |ff-highlight-groups|
Deps ............................................................... |ff-deps|
TODO ............................................................... |ff-todo|
Features excluded for simplicity ....... |ff-features-excluded-for-simplicity|
Similar plugins ......................................... |ff-similar-plugins|

==============================================================================
`FF.NVIM`                                                         *ff-ff.nvim*


A small, simple fuzzy finder with intelligent weights.

- **Small**: ~1000 LOC,
- **Simple**: 1 source file, 1 test file
- **Fuzzy**: Uses `fzy-lua-native` to fuzzy match against the current input
- **Intelligent weights**: Sorts the results by weighing: - Frecent
  (frequently + recently opened) files - Open buffers - Modified buffers - The
  alternate buffer - The current buffer - The basename of the current file
  (with and without an extension) - The fuzzy score of the filename against
  the current input

------------------------------------------------------------------------------
CONFIGURATION EXAMPLE                               *ff-configuration-example*


>lua
    local ff = require "ff"
    ff.setup {
      -- defaults to:
      refresh_fd_cache = "module-load",
      benchmark_step = false,
      benchmark_mean = false,
      fd_cmd = "fd --absolute-path --hidden --type f --exclude .git",
    }
    
    local editor_height = vim.o.lines - 1
    local input_height = 1
    local border_height = 2
    local available_height = editor_height - input_height - (border_height * 3)
    local results_height = math.floor(available_height / 2)
    local input_row = editor_height
    local results_row = input_row - input_height - border_height
    
    vim.keymap.set("n", "<leader>f", function()
      ff.find {
        -- no keymaps are set by default
        keymaps = {
          n = {
            ["<cr>"] = "select",
            ["<c-n>"] = "next",
            ["<c-p>"] = "prev",
            ["<c-c>"] = "close",
            ["<esc>"] = "close",
    
            ["q"] = "close",
          },
          i = {
            ["<cr>"] = "select",
            ["<c-n>"] = "next",
            ["<c-p>"] = "prev",
            ["<c-c>"] = "close",
            ["<esc>"] = "close",
          },
        },
        -- defaults:
        weights = {
          open_buf_boost = 10,
          modified_buf_boost = 20,
          alternate_buf_boost = 30,
          basename_boost = 40,
          current_buf_boost = -1000,
        },
        batch_size = 250,
        icons_enabled = true,
        hi_enabled = true,
        max_results_considered = 5000,
        fuzzy_score_multiple = 0.7,
        file_score_multiple = 0.3,
        input_win_config = {
          style = "minimal",
          anchor = "SW",
          relative = "editor",
          width = vim.o.columns,
          height = 1,
          row = input_row,
          col = 0,
          border = "rounded",
          title = "Input",
        },
        results_win_config = {
          style = "minimal",
          anchor = "SW",
          relative = "editor",
          width = vim.o.columns,
          height = results_height,
          row = results_row,
          col = 0,
          border = "rounded",
          title = "Results",
          focusable = false,
        },
        on_picker_open = function(on_picker_open_opts) end
      }
    end)
<

------------------------------------------------------------------------------
API                                                                   *ff-api*



                                                                              
`SETUP`                                                             *ff-setup*

>lua
    --- @class SetupOpts
    --- @field refresh_fd_cache? "module-load"|"find-call"
    --- @field benchmark_step? boolean
    --- @field benchmark_mean? boolean
    --- @field fd_cmd? string
    
    --- @param opts? SetupOpts
    M.setup = function(opts) end
<

                                                                              
`FIND`                                                               *ff-find*

>lua
    --- @class FindOpts
    --- @field keymaps? FindKeymapsPerMode
    --- @field weights? FindWeights
    --- @field batch_size? number
    --- @field icons_enabled? boolean
    --- @field hi_enabled? boolean
    --- @field max_results_considered? number
    --- @field fuzzy_score_multiple? number
    --- @field file_score_multiple? number
    --- @field input_win_config? vim.api.keyset.win_config
    --- @field results_win_config? vim.api.keyset.win_config
    --- @field on_picker_open? fun(opts:OnPickerOpenOpts):nil
    
    --- @class OnPickerOpenOpts
    --- @field results_win number
    --- @field results_buf number
    --- @field input_win number
    --- @field input_buf number
    
    --- @class FindWeights
    --- @field open_buf_boost? number
    --- @field modified_buf_boost? number
    --- @field alternate_buf_boost? number
    --- @field current_buf_boost? number
    --- @field basename_boost? number
    
    --- @class FindKeymapsPerMode
    --- @field i? FindKeymaps
    --- @field n? FindKeymaps
    
    --- @class FindKeymaps
    --- @field [string] "select"|"next"|"prev"|"close"|function
    
    --- @param opts? FindOpts
    M.find = function(opts) end
<

                                                                              
`REFRESH_FD_CACHE`                                       *ff-refresh_fd_cache*

>lua
    --- @param fd_cmd string
    M.refresh_fd_cache = function(fd_cmd) end
<

------------------------------------------------------------------------------
PERFORMANCE                                                   *ff-performance*


`ff.nvim` prioritizes performance in a few ways:

- Files are weighted and sorted in batches w/coroutines to avoid blocking the
  picker UI
- `fd` calls are executed once and cached when the plugin first loads
- Frecency scores are calculated once and cached when the picker is opened -
  not on every keystroke
- Open buffers are pulled once and cached when the picker is opened
- Icons are cached by extension to avoid calling `mini.icons` when possible
- A max of `opts.max_results_considered` results are processed
- Results are cached for each user input
- Results from the previous input (or more accurately, the current input minus
  the last character) are used as the source files when filtering results for
  the current input. This _dramatically_ reduces the number of files to
  process as the input grows
- Icons and highlights can be disabled for especially large codebases
With these optimizations in place, I average around **15ms per keystroke on a
codebase of 50k files**. Enable the `benchmark_step` and `benchmark_mean`
options to try yourself!


------------------------------------------------------------------------------
HIGHLIGHT GROUPS                                         *ff-highlight-groups*


- `FFPickerFuzzyHighlightChar`: The chars in a result currently fuzzy matched
  - Defaults to `Search`
- `FFPickerCursorLine`: The current line in the results window - Defaults to
  `CursorLine`
  [!NOTE] The default highlight groups are set as a part of the `setup`
  function. In order to successfully override a highlight group, make sure to
  set it after calling`setup`


------------------------------------------------------------------------------
DEPS                                                                 *ff-deps*


- fzy-lua-native <https://github.com/romgrk/fzy-lua-native>
- mini.icons <https://github.com/echasnovski/mini.icons>
- `fd` <https://github.com/sharkdp/fd>

------------------------------------------------------------------------------
TODO                                                                 *ff-todo*


- [ ] Support alternatives to `mini.icons`
- [ ] Support alternatives to `fd`
- [ ] Support Windows

------------------------------------------------------------------------------
FEATURES EXCLUDED FOR SIMPLICITY         *ff-features-excluded-for-simplicity*


- Multi-select
- Shared options between `setup` and `find`
- A preview window

------------------------------------------------------------------------------
SIMILAR PLUGINS                                           *ff-similar-plugins*


- smart-open.nvim <https://github.com/danielfalk/smart-open.nvim>
- fff.nvim <https://github.com/dmtrKovalenko/fff.nvim>
- snacks.nvim's smart picker
  <https://github.com/folke/snacks.nvim/blob/main/docs/picker.md#smart>

vim:tw=78:ts=8:ft=help:norl: